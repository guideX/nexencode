'nexENCODE Studio 5.0 Alpha 1.3
'December 29th, 2011
Option Explicit On
Option Strict On
Imports System.IO

Namespace WaveLib
    Public Class clsWaveStream
        Inherits Stream
        Implements IDisposable
        Public Event ProcessError(lError As String, lSub As String)
        Private lStream As Stream
        Private lDataPos As Long
        Private lLength As Long
        Private lFormat As WaveFormat

        Public ReadOnly Property Format() As WaveFormat
            Get
                Try
                    Return lFormat
                Catch ex As Exception
                    Return Nothing
                End Try
            End Get
        End Property

        Private Function ReadChunk(_Reader As BinaryReader) As String
            Try
                Dim _Byte As Byte() = New Byte(3) {}
                _Reader.Read(_Byte, 0, _Byte.Length)
                Return System.Text.Encoding.ASCII.GetString(_Byte)
            Catch ex As Exception
                RaiseEvent ProcessError(ex.Message, "Private Function ReadChunk(_Reader As BinaryReader) As String")
                Return Nothing
            End Try
        End Function

        Private Sub ReadHeader()
            Try
                Dim _Reader As New BinaryReader(lStream), _lFormatLength As Integer
                If ReadChunk(_Reader) <> "RIFF" Then
                    Throw New Exception("Invalid file format")
                End If
                _Reader.ReadInt32()
                If ReadChunk(_Reader) <> "WAVE" Then
                    Throw New Exception("Invalid file format")
                End If
                If ReadChunk(_Reader) <> "fmt " Then
                    Throw New Exception("Invalid file format")
                End If
                _lFormatLength = _Reader.ReadInt32()
                If _lFormatLength < 16 Then
                    Throw New Exception("Invalid file format")
                End If
                lFormat = New WaveFormat(22050, 16, 2)
                lFormat.lFormatTag = _Reader.ReadInt16()
                lFormat.lChannels = _Reader.ReadInt16()
                lFormat.lSamplesPerSec = _Reader.ReadInt32()
                lFormat.lAverageBytesPerSecond = _Reader.ReadInt32()
                lFormat.lBlockAlign = _Reader.ReadInt16()
                lFormat.lBitsPerSample = _Reader.ReadInt16()
                If _lFormatLength > 16 Then
                    lStream.Position += (_lFormatLength - 16)
                End If
                While lStream.Position < lStream.Length AndAlso ReadChunk(_Reader) <> "data"
                    'Do Nothing
                End While
                If lStream.Position >= lStream.Length Then
                    Throw New Exception("Invalid file format")
                End If
                lLength = _Reader.ReadInt32()
                lDataPos = lStream.Position
                Position = 0
            Catch ex As Exception
                RaiseEvent ProcessError(ex.Message, "Private Sub ReadHeader()")
            End Try
        End Sub

        Public Sub New(_FileName As String)
            Me.New(New FileStream(_FileName, FileMode.Open))
        End Sub

        Public Sub New(_Stream As Stream)
            Try
                lStream = _Stream
                ReadHeader()
            Catch ex As Exception
                RaiseEvent ProcessError(ex.Message, "Public Sub New(_Stream As Stream)")
            End Try
        End Sub

        Protected Overrides Sub Finalize()
            Try
                Dispose()
            Catch ex As Exception
                RaiseEvent ProcessError(ex.Message, "Protected Overrides Sub Finalize()")
            Finally
                MyBase.Finalize()
            End Try
        End Sub

        Public Overloads Sub Dispose() Implements IDisposable.Dispose
            Try
                If lStream IsNot Nothing Then
                    lStream.Close()
                End If
                GC.SuppressFinalize(Me)
            Catch ex As Exception
                RaiseEvent ProcessError(ex.Message, "Public Overloads Sub Dispose() Implements IDisposable.Dispose")
            End Try
        End Sub

        Public Overrides ReadOnly Property CanRead() As Boolean
            Get
                Try
                    Return True
                Catch ex As Exception
                    RaiseEvent ProcessError(ex.Message, "Public Overrides ReadOnly Property CanRead() As Boolean")
                    Return Nothing
                End Try
            End Get
        End Property

        Public Overrides ReadOnly Property CanSeek() As Boolean
            Get
                Try
                    Return True
                Catch ex As Exception
                    RaiseEvent ProcessError(ex.Message, "Public Overrides ReadOnly Property CanSeek() As Boolean")
                    Return Nothing
                End Try
            End Get
        End Property

        Public Overrides ReadOnly Property CanWrite() As Boolean
            Get
                Try
                    Return False
                Catch ex As Exception
                    RaiseEvent ProcessError(ex.Message, "Public Overrides ReadOnly Property CanWrite() As Boolean")
                    Return Nothing
                End Try
            End Get
        End Property

        Public Overrides ReadOnly Property Length() As Long
            Get
                Try
                    Return lLength
                Catch ex As Exception
                    RaiseEvent ProcessError(ex.Message, "Public Overrides ReadOnly Property Length() As Long")
                    Return Nothing
                End Try
            End Get
        End Property

        Public Overrides Property Position() As Long
            Get
                Try
                    Return lStream.Position - lDataPos
                Catch ex As Exception
                    RaiseEvent ProcessError(ex.Message, "Public Overrides Property Position() As Long")
                    Return Nothing
                End Try
            End Get
            Set(_Value As Long)
                Try
                    Seek(_Value, SeekOrigin.Begin)
                Catch ex As Exception
                    RaiseEvent ProcessError(ex.Message, "Public Overrides Property Position() As Long")
                End Try
            End Set
        End Property

        Public Overrides Sub Close()
            Try
                Dispose()
            Catch ex As Exception
                RaiseEvent ProcessError(ex.Message, "Public Overrides Sub Close()")
            End Try
        End Sub

        Public Overrides Sub Flush()
        End Sub

        Public Overrides Sub SetLength(len As Long)
            Throw New InvalidOperationException()
        End Sub

        Public Overrides Function Seek(pos As Long, o As SeekOrigin) As Long
            Select Case o
                Case SeekOrigin.Begin
                    lStream.Position = pos + lDataPos
                    Exit Select
                Case SeekOrigin.Current
                    lStream.Seek(pos, SeekOrigin.Current)
                    Exit Select
                Case SeekOrigin.[End]
                    lStream.Position = lDataPos + lLength - pos
                    Exit Select
            End Select
            Return Me.Position
        End Function

        Public Overrides Function Read(buf As Byte(), ofs As Integer, count As Integer) As Integer
            Dim toread As Integer = CInt(Math.Min(count, lLength - Position))
            Return lStream.Read(buf, ofs, toread)
        End Function

        Public Overrides Sub Write(buf As Byte(), ofs As Integer, count As Integer)
            Throw New InvalidOperationException()
        End Sub
    End Class
End Namespace